@page "/"
@inject ISnackbar Snackbar

<PageTitle>pwnlift</PageTitle>

<style>
    .file-upload-input {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 10;
        opacity: 0;
    }
</style>

<MudStack Style="width: 100%; padding: 10px">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="@_fileUpload"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="file-upload-input"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop files here or click to open dialogue
                </MudText>
                @foreach (var file in _files)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file.Name"
                             tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-start gap-4">
        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Open file picker
        </MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(!_files.Any())"
                   OnClick="@Upload"
                   Variant="Variant.Filled">
            Upload
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!_files.Any())"
                   OnClick="@ClearAsync"
                   Variant="Variant.Filled">
            Clear
        </MudButton>
    </MudToolBar>
</MudStack>

@code {

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private readonly List<IBrowserFile> _files = [];

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _files.Clear();
        
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        
        var files = e.GetMultipleFiles();
        
        foreach (var file in files)
            _files.Add(file);
    }

    private async Task Upload()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;

        var destination = Path.Combine(Directory.GetCurrentDirectory(), "Uploads");

        if (!Directory.Exists(destination))
            Directory.CreateDirectory(destination);

        foreach (var file in _files)
        {
            try
            {
                await using var fs = file.OpenReadStream();
                await using var ms = new MemoryStream();
                await fs.CopyToAsync(ms);

                var path = Path.Combine(destination, file.Name);

                await File.WriteAllBytesAsync(path, ms.ToArray());
            }
            catch (Exception e)
            {
                Snackbar.Add($"Upload failed: {e.Message}", Severity.Error);
            }
        }
        
        Snackbar.Add($"Upload complete", Severity.Success);
        await ClearAsync();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}